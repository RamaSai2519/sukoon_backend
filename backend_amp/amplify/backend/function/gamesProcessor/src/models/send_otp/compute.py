from models.interfaces import SendOTPInput as Input, Output
from models.constants import OutputStatus
from db.otp import get_otp_collection
from configs import CONFIG as config
import requests
import string
import random


class Compute:
    def __init__(self, input: Input) -> None:
        self.input = input
        self.otp_string = "Dear user, use __OTP__ as One Time Password generated by Three Dots & Dash to log in to your Sukoon.Love account."

    def _generate_otp(self, length=4) -> str:
        return ''.join(random.choices(string.digits, k=length))

    def _send_otp_via_sms(self, phone_number, otp):
        query_params = config.SMS_API_CONFIG
        query_params["msg"] = self.otp_string.replace("__OTP__", otp)
        query_params["send_to"] = "91" + phone_number
        response = requests.get(url=config.SMS_API_URL,
                                params=query_params, verify=False)
        if response.text.startswith("success"):
            return "OTP generated and sent successfully via SMS", OutputStatus.SUCCESS
        return "Some error occured while sending OTP via SMS. Please try again", OutputStatus.FAILURE

    def send_otp_via_whatsapp(self, phone_number, otp):
        template_name = "SIGN_IN_OTP"
        response = requests.post(
            url="https://6x4j0qxbmk.execute-api.ap-south-1.amazonaws.com/main/actions/send_whatsapp",
            headers={"Content-Type": "application/json"},
            json={
                "template_name": template_name,
                "phone_number": phone_number,
                "parameters": {
                    "otp": otp
                }
            }
        )
        if response.status_code == 200:
            return "OTP generated and sent successfully via WA", OutputStatus.SUCCESS
        return "Some error occured while sending OTP via WA. Please try again", OutputStatus.FAILURE

    def _generate_and_send_otp(self):

        otp_collection = get_otp_collection()
        record = otp_collection.find_one(
            {"phoneNumber": self.input.phone_number})
        if not record:

            otp = self._generate_otp()

            otp_collection.insert_one({
                'phoneNumber': self.input.phone_number,
                'otp': otp,
            })
        else:
            otp = record.get("otp")

        message_1, status_code_1 = self._send_otp_via_sms(
            self.input.phone_number, otp)
        message_2, status_code_2 = self.send_otp_via_whatsapp(
            self.input.phone_number, otp)
        message = f"{message_1} and {message_2}"
        status_code = OutputStatus.SUCCESS if status_code_1 == OutputStatus.SUCCESS and status_code_2 == OutputStatus.SUCCESS else OutputStatus.FAILURE
        return status_code, message

    def compute(self) -> Output:

        message, output_status = self._generate_and_send_otp()

        return Output(
            output_details={},
            output_status=output_status,
            output_message=message
        )
