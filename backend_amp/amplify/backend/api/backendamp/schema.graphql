type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  firstName: String
  lastName: String
  gender: Gender
  status: UserStatus
  isDeleted: Boolean
  interestedInClubSukoon: Boolean
  dateOfBirth: AWSDate
  mobileNumber: String! @index(name: "userByMobileNumberIdx", queryField: "userByMobileNumber") 
  userNotifications: [UserNotification] @hasMany(indexName: "userNotificationsByUserIdx", fields: ["id"])
  userConversationsAsUser: [UserConversations] @hasMany(indexName: "userConversationsByUserIdx", fields: ["id"])
  userConversationsAsSarathi: [UserConversations] @hasMany(indexName: "userConversationsBySarathiIdx", fields: ["id"])
}

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  REGISTERED
  NON_REGISTERED
}

type UserNotification @model @auth(rules: [{ allow: public }]) 
{
  id: ID!
  userId: ID! @index(name: "userNotificationsByUserIdx", queryField: "userNotificationsByUserId") 
  requestMeta: String
  externalMessageId: String
  status: NotificationStatus
  notificationType: NotificationType
  notificationJobType: NotificationJobType
}

enum NotificationType {
  SMS
  WHATSAPP
  PUSH
  EMAIL
}

enum NotificationJobType {
  SMS
  WHATSAPP
  PUSH
  EMAIL
}

enum NotificationStatus {
  SUCCESS
  FAILURE
}

type ScheduledJobs @model @auth(rules: [{ allow: public }]) 
{
  id: ID!
  scheduledJobType: ScheduledJobType
  scheduledJobTime: AWSDateTime
  scheduledJobStatus: ScheduledJobStatus @index(name: "scheduledJobsByStatusAndTimeIdx", sortKeyFields: ["scheduledJobTime"]   queryField: "scheduledJobsByStatusAndTime") 
  requestMeta: String 
}

enum ScheduledJobType {
  CALL
  NOTIFICATION
}

enum ScheduledJobStatus {
  PENDING 
  PICKED
  FAILED
  COMPLETED
}

type UserConversations @model @auth(rules: [{ allow: public }]) 
{
  id: ID!
  userId: ID! @index(name: "userConversationsByUserIdx", queryField: "userConversationsByUserId") 
  sarathiId: ID! @index(name: "userConversationsBySarathiIdx", queryField: "userConversationsBySarathiId") 
  initiatedTime: AWSDateTime
  duration: AWSTime
  transferDuration: AWSTime
  recordingURL: String
  requestMeta: String
  externalConversationId: String
  status: ConversationStatus
  conversationPlatform: ConversationPlatform
}

enum ConversationStatus {
  FAILED
  SUCCESSFUL
}

enum ConversationPlatform {
  CALL
  GAMES
}

type UserWhatsappFeedback @model @auth(rules: [{ allow: public }]) 
{
  id: ID!
  userId: ID! 
  sarathiId: ID!
  eventId: String
  feedback: String
  feedbackEvent: FeedbackEvent
}

enum FeedbackEvent {
  CALL
  GAME
}

type UserReceivedMessages @model @auth(rules: [{ allow: public }]) 
{
  id: ID!
  userId: ID! 
  message: String
  source: ReceivedMessageSource
}

enum ReceivedMessageSource {
  WHATSAPP
}

type MultipleChoiceQuestions @model @auth(rules: [{ allow: public }]) 
{
  id: ID!
  question: String
  options: [String!]!
  level: Int
  questionNumber: Int
  game: Game
}

enum Game {
  QUIZ
  CARD
}


type Event @model @auth(rules: [{ allow: public }]) {
  id: ID!
  mainTitle: String
  subTitle: String
  hostedBy: String
  guestSpeaker: String
  repeat: String
  eventType: EventType
  imageUrl: [String]
  meetingLink: String
  description: String
  maxVisitorsAllowed: Int
  prizeMoney: Int
  eventEndTime: AWSDateTime
  eventStartTime: AWSDateTime
  registrationAllowedTillTime: AWSDateTime
  isPremiumUserOnly: Boolean
}

enum EventRepeat {
  DAILY
  WEEKLY
  MONTHLY
}

enum EventType {
  SESSION
  CHALLENGE
}

